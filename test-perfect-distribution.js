/**
 * ๐งช ุงุฎุชุจุงุฑ ุฎูุงุฑุฒููุฉ ุงูุชูุฒูุน ุงููุซุงูู
 * 
 * ูุฐุง ุงูุณูุฑูุจุช ูุฎุชุจุฑ ุฏูุฉ ุงูุชูุฒูุน ุจูุฎุชูู ุงูุณููุงุฑูููุงุช
 */

// ูุญุงูุงุฉ ุงูุฎูุงุฑุฒููุฉ ูู TypeScript
function perfectDistribution(items, totalItems) {
  if (items.length === 0) throw new Error('ูุง ุชูุฌุฏ ุตูุญุงุช ููุชูุฒูุน')
  if (totalItems <= 0) throw new Error('ุนุฏุฏ ุงูุนูุงุตุฑ ูุฌุจ ุฃู ูููู ุฃูุจุฑ ูู ุตูุฑ')
  
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0)
  if (totalWeight === 0) throw new Error('ูุฌููุน ุงูุฃูุฒุงู ูุณุงูู ุตูุฑ')
  
  // ุญุณุงุจ ุงูุชูุฒูุน ุงูุฏููู
  const exactAllocations = items.map(item => ({
    path: item.path,
    weight: item.weight,
    percentage: (item.weight / totalWeight) * 100,
    exactCount: (item.weight / totalWeight) * totalItems,
    floorCount: 0,
    remainder: 0
  }))
  
  // ุฃุฎุฐ ุงูุฌุฒุก ุงูุตุญูุญ
  exactAllocations.forEach(item => {
    item.floorCount = Math.floor(item.exactCount)
    item.remainder = item.exactCount - item.floorCount
  })
  
  // ุญุณุงุจ ุงูุจุงูู
  const assignedSoFar = exactAllocations.reduce((sum, item) => sum + item.floorCount, 0)
  let remainingToDistribute = totalItems - assignedSoFar
  
  // ุชูุฒูุน ุงูุจุงูู (Largest Remainder Method)
  const sortedByRemainder = [...exactAllocations].sort((a, b) => b.remainder - a.remainder)
  for (let i = 0; i < remainingToDistribute; i++) {
    sortedByRemainder[i].floorCount += 1
  }
  
  return exactAllocations.map(item => ({
    path: item.path,
    weight: item.weight,
    expectedCount: item.exactCount,
    actualCount: item.floorCount,
    percentage: (item.floorCount / totalItems) * 100
  }))
}

console.log('๐งช ุงุฎุชุจุงุฑ ุฎูุงุฑุฒููุฉ ุงูุชูุฒูุน ุงููุซุงูู')
console.log('='.repeat(70))
console.log('')

// ========== ุงุฎุชุจุงุฑ 1: ุชูุฒูุน ูุชุณุงูู ==========
console.log('๐ ุงุฎุชุจุงุฑ 1: ุชูุฒูุน ูุชุณุงูู ุนูู 3 ุตูุญุงุช')
console.log('-'.repeat(70))

const test1 = perfectDistribution(
  [
    { path: 'sales1', weight: 33.33 },
    { path: 'sales2', weight: 33.33 },
    { path: 'sales3', weight: 33.34 }
  ],
  1000
)

test1.forEach(r => {
  console.log(`${r.path}:`)
  console.log(`  ุงููุฒู: ${r.weight}%`)
  console.log(`  ุงููุชููุน: ${r.expectedCount.toFixed(2)}`)
  console.log(`  ุงููุนูู: ${r.actualCount}`)
  console.log(`  ุงููุณุจุฉ: ${r.percentage.toFixed(2)}%`)
  console.log(`  ุงููุฑู: ${Math.abs(r.actualCount - r.expectedCount).toFixed(4)}`)
})

const total1 = test1.reduce((s, r) => s + r.actualCount, 0)
console.log(`โ ุงูุฅุฌูุงูู: ${total1} / 1000 (${total1 === 1000 ? 'ุฏููู 100%' : 'ุฎุทุฃ!'})`)
console.log('')

// ========== ุงุฎุชุจุงุฑ 2: ุชูุฒูุน ูุฎุตุต ==========
console.log('๐ ุงุฎุชุจุงุฑ 2: ุชูุฒูุน ูุฎุตุต (20%, 30%, 50%)')
console.log('-'.repeat(70))

const test2 = perfectDistribution(
  [
    { path: 'sales1', weight: 20 },
    { path: 'sales2', weight: 30 },
    { path: 'sales3', weight: 50 }
  ],
  500
)

test2.forEach(r => {
  const totalWeight = test2.reduce((s, t) => s + t.weight, 0)
  const expectedPercentage = (r.weight / totalWeight) * 100
  console.log(`${r.path}:`)
  console.log(`  ุงููุฒู: ${r.weight}`)
  console.log(`  ุงููุณุจุฉ ุงููุชููุนุฉ: ${expectedPercentage.toFixed(2)}%`)
  console.log(`  ุงููุชููุน: ${r.expectedCount.toFixed(2)}`)
  console.log(`  ุงููุนูู: ${r.actualCount}`)
  console.log(`  ุงููุณุจุฉ ุงููุนููุฉ: ${r.percentage.toFixed(2)}%`)
  console.log(`  ุงููุฑู: ${Math.abs(r.actualCount - r.expectedCount).toFixed(4)}`)
})

const total2 = test2.reduce((s, r) => s + r.actualCount, 0)
console.log(`โ ุงูุฅุฌูุงูู: ${total2} / 500 (${total2 === 500 ? 'ุฏููู 100%' : 'ุฎุทุฃ!'})`)
console.log('')

// ========== ุงุฎุชุจุงุฑ 3: ุชูุฒูุน ุนูู 11 ุตูุญุฉ ==========
console.log('๐ ุงุฎุชุจุงุฑ 3: ุชูุฒูุน ุนูู 11 ุตูุญุฉ (ููุง ูู QSR)')
console.log('-'.repeat(70))

const test3 = perfectDistribution(
  [
    { path: 'sales1', weight: 9.09 },
    { path: 'sales2', weight: 9.09 },
    { path: 'sales3', weight: 9.09 },
    { path: 'sales4', weight: 9.09 },
    { path: 'sales5', weight: 9.09 },
    { path: 'sales6', weight: 9.09 },
    { path: 'sales7', weight: 9.09 },
    { path: 'sales8', weight: 9.09 },
    { path: 'sales9', weight: 9.09 },
    { path: 'sales10', weight: 9.09 },
    { path: 'sales11', weight: 9.10 }
  ],
  1100
)

test3.forEach(r => {
  console.log(`${r.path}: ${r.actualCount} (${r.percentage.toFixed(2)}%)`)
})

const total3 = test3.reduce((s, r) => s + r.actualCount, 0)
console.log(`โ ุงูุฅุฌูุงูู: ${total3} / 1100 (${total3 === 1100 ? 'ุฏููู 100%' : 'ุฎุทุฃ!'})`)
console.log('')

// ========== ุงุฎุชุจุงุฑ 4: ุญุงูุฉ ุญุฑุฌุฉ - ุนุฏุฏ ุตุบูุฑ ==========
console.log('๐ ุงุฎุชุจุงุฑ 4: ุญุงูุฉ ุญุฑุฌุฉ - 10 ุนูุงุตุฑ ุนูู 3 ุตูุญุงุช')
console.log('-'.repeat(70))

const test4 = perfectDistribution(
  [
    { path: 'sales1', weight: 33.33 },
    { path: 'sales2', weight: 33.33 },
    { path: 'sales3', weight: 33.34 }
  ],
  10
)

test4.forEach(r => {
  console.log(`${r.path}: ${r.actualCount} (${r.percentage.toFixed(2)}%)`)
})

const total4 = test4.reduce((s, r) => s + r.actualCount, 0)
console.log(`โ ุงูุฅุฌูุงูู: ${total4} / 10 (${total4 === 10 ? 'ุฏููู 100%' : 'ุฎุทุฃ!'})`)
console.log('')

// ========== ุงุฎุชุจุงุฑ 5: ุญุงูุฉ ุบูุฑ ูุชุณุงููุฉ ุชูุงูุงู ==========
console.log('๐ ุงุฎุชุจุงุฑ 5: ุฃูุฒุงู ุบูุฑ ูุชุณุงููุฉ (10, 20, 30, 40)')
console.log('-'.repeat(70))

const test5 = perfectDistribution(
  [
    { path: 'sales1', weight: 10 },
    { path: 'sales2', weight: 20 },
    { path: 'sales3', weight: 30 },
    { path: 'sales4', weight: 40 }
  ],
  1000
)

test5.forEach(r => {
  const totalWeight = test5.reduce((s, t) => s + t.weight, 0)
  const expectedPercentage = (r.weight / totalWeight) * 100
  console.log(`${r.path}:`)
  console.log(`  ุงููุฒู: ${r.weight}`)
  console.log(`  ุงููุณุจุฉ ุงููุชููุนุฉ: ${expectedPercentage.toFixed(2)}%`)
  console.log(`  ุงููุนูู: ${r.actualCount}`)
  console.log(`  ุงููุณุจุฉ ุงููุนููุฉ: ${r.percentage.toFixed(2)}%`)
})

const total5 = test5.reduce((s, r) => s + r.actualCount, 0)
console.log(`โ ุงูุฅุฌูุงูู: ${total5} / 1000 (${total5 === 1000 ? 'ุฏููู 100%' : 'ุฎุทุฃ!'})`)
console.log('')

console.log('='.repeat(70))
console.log('๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ุงูุชููุช!')
console.log('')
console.log('ุงููุชูุฌุฉ: ุงูุฎูุงุฑุฒููุฉ ุชุนุทู ุชูุฒูุน ุฏููู 100% ูู ุฌููุน ุงูุญุงูุงุช โ')

