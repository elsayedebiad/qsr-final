generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String
  password         String
  role             Role              @default(USER)
  permissions      String[]          @default([])
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  activities       ActivityLog[]
  bookedCVs        Booking[]         @relation("BookedCVs")
  createdCVs       CV[]              @relation("CVCreatedBy")
  updatedCVs       CV[]              @relation("CVUpdatedBy")
  notifications    Notification[]
  sessions         Session[]
  loginActivations LoginActivation[]
  userSessions     UserSession[]     @relation("UserSessions")
  assignedDistributions CVDistribution[] @relation("DistributionAssigner")
  removedDistributions  CVDistribution[] @relation("DistributionRemover")
  distributionLogs      DistributionLog[]

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model CV {
  id                 Int            @id @default(autoincrement())
  fullName           String
  fullNameArabic     String?
  email              String?
  phone              String?
  referenceCode      String?        @unique
  monthlySalary      String?
  contractPeriod     String?
  position           String?
  passportNumber     String?        @unique
  passportIssueDate  String?
  passportExpiryDate String?
  passportIssuePlace String?
  nationality        String?
  religion           String?
  dateOfBirth        String?
  placeOfBirth       String?
  livingTown         String?
  maritalStatus      MaritalStatus?
  numberOfChildren   Int?
  weight             String?
  height             String?
  complexion         String?
  age                Int?
  englishLevel       SkillLevel?
  arabicLevel        SkillLevel?
  englishLevelRaw    String?        // القيمة الأصلية من الشيت
  arabicLevelRaw     String?        // القيمة الأصلية من الشيت
  babySitting        SkillLevel?
  childrenCare       SkillLevel?
  tutoring           SkillLevel?
  disabledCare       SkillLevel?
  cleaning           SkillLevel?
  washing            SkillLevel?
  ironing            SkillLevel?
  arabicCooking      SkillLevel?
  sewing             SkillLevel?
  driving            SkillLevel?
  previousEmployment String?
  profileImage       String?
  cvImageUrl         String?  // رابط صورة السيرة الكاملة المصممة
  videoLink          String?
  experience         String?
  education          String?
  skills             String?
  summary            String?
  content            String?
  notes              String?
  attachments        String?
  status             CVStatus       @default(NEW)
  priority           Priority       @default(MEDIUM)
  source             String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  createdById        Int
  updatedById        Int?
  cooking            SkillLevel?
  educationLevel     String?
  elderCare          SkillLevel?
  housekeeping       SkillLevel?
  activities         ActivityLog[]
  booking            Booking?
  contract           Contract?
  versions           CVVersion[]
  createdBy          User           @relation("CVCreatedBy", fields: [createdById], references: [id])
  updatedBy          User?          @relation("CVUpdatedBy", fields: [updatedById], references: [id])
  distributions      CVDistribution[]

  @@map("cvs")
}

model CVVersion {
  id        Int      @id @default(autoincrement())
  cvId      Int
  content   String
  version   Int
  createdAt DateTime @default(now())
  createdBy Int
  cv        CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@unique([cvId, version])
  @@map("cv_versions")
}

model Booking {
  id             Int      @id @default(autoincrement())
  cvId           Int      @unique
  identityNumber String
  notes          String?
  bookedAt       DateTime @default(now())
  bookedById     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookedBy       User     @relation("BookedCVs", fields: [bookedById], references: [id])
  cv             CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Contract {
  id                Int       @id @default(autoincrement())
  cvId              Int       @unique
  identityNumber    String
  contractStartDate DateTime  @default(now())
  contractEndDate   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  cv                CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType
  category  String
  data      String?
  isRead    Boolean          @default(false)
  userId    Int
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  cvId        Int?
  action      String
  description String
  metadata    Json?
  targetType  String?
  targetId    String?
  targetName  String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  cv          CV?      @relation(fields: [cvId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model SalesConfig {
  id             String   @id @default(cuid())
  salesPageId    String   @unique
  whatsappNumber String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("sales_configs")
}

model Banner {
  id          Int         @id @default(autoincrement())
  salesPageId String      // sales1, sales2, sales3, sales4
  imageUrl    String      @db.Text // الصورة كـ Base64 (محفوظة في قاعدة البيانات)
  deviceType  DeviceType  // mobile أو desktop
  bannerType  BannerType  @default(MAIN) // نوع البنر: رئيسي أو إضافي
  order       Int         @default(0) // ترتيب البنر
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("banners")
}

model LoginActivation {
  id             Int      @id @default(autoincrement())
  userId         Int
  activationCode String   @unique
  isUsed         Boolean  @default(false)
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_activations")
}

model SystemSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique // مفتاح الإعداد (مثل: "system_active")
  value     String   // قيمة الإعداد
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model UserSession {
  id           Int       @id @default(autoincrement())
  userId       Int
  sessionId    String    @unique
  loginTime    DateTime  @default(now())
  logoutTime   DateTime?
  lastActivity DateTime  @default(now())
  ipAddress    String?
  userAgent    String?
  isActive     Boolean   @default(true)
  duration     Int?      // Session duration in minutes
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

enum DeviceType {
  MOBILE
  DESKTOP
}

enum BannerType {
  MAIN
  SECONDARY
}

enum Role {
  DEVELOPER
  ADMIN
  SUB_ADMIN
  CUSTOMER_SERVICE
  SALES
  USER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum CVStatus {
  NEW
  BOOKED
  HIRED
  REJECTED
  RETURNED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum SkillLevel {
  YES
  NO
  WILLING
}

enum ActivityType {
  CV_CREATED
  CV_UPDATED
  CV_DELETED
  CV_STATUS_CHANGED
  CV_EXPORTED
  USER_LOGIN
  USER_LOGOUT
  EXCEL_IMPORT
  CV_DISTRIBUTED
  CV_REMOVED_FROM_PAGE
}

// نظام التوزيع الجديد
model CVDistribution {
  id           Int          @id @default(autoincrement())
  cvId         Int
  salesPageId  String       // sales1, sales2, ... sales11
  assignedAt   DateTime     @default(now())
  removedAt    DateTime?
  isActive     Boolean      @default(true)
  assignedBy   Int
  removedBy    Int?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  cv           CV           @relation(fields: [cvId], references: [id], onDelete: Cascade)
  assigner     User         @relation("DistributionAssigner", fields: [assignedBy], references: [id])
  remover      User?        @relation("DistributionRemover", fields: [removedBy], references: [id])
  
  @@unique([cvId, salesPageId, isActive])
  @@index([salesPageId, isActive])
  @@index([cvId])
  @@map("cv_distributions")
}

model DistributionRule {
  id              Int      @id @default(autoincrement())
  salesPageId     String   @unique
  dailyLimit      Int?     // حد السير اليومية (null = لا يوجد حد)
  totalLimit      Int?     // الحد الأقصى الكلي
  minCVs          Int      @default(0)  // الحد الأدنى
  maxCVs          Int?     // الحد الأقصى
  priority        Int      @default(0)  // أولوية الصفحة في التوزيع
  isActive        Boolean  @default(true)
  autoDistribute  Boolean  @default(false) // التوزيع التلقائي
  nationality     String?  // تخصيص لجنسية معينة
  position        String?  // تخصيص لوظيفة معينة
  googleWeight    Float    @default(0)    // نسبة التوزيع لزيارات Google
  otherWeight     Float    @default(0)    // نسبة التوزيع لباقي الزيارات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("distribution_rules")
}

model DistributionLog {
  id              Int      @id @default(autoincrement())
  action          String   // ASSIGNED, REMOVED, BULK_ASSIGNED, etc.
  salesPageId     String
  cvIds           Int[]    // قائمة معرفات السير
  userId          Int
  count           Int      // عدد السير المتأثرة
  details         Json?    // تفاصيل إضافية
  timestamp       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([salesPageId, timestamp])
  @@map("distribution_logs")
}

// إحصائيات التوزيع
model DistributionStats {
  id              Int      @id @default(autoincrement())
  salesPageId     String   
  date            DateTime @db.Date
  totalAssigned   Int      @default(0)
  totalRemoved    Int      @default(0)
  activeCount     Int      @default(0)
  viewCount       Int      @default(0)
  bookingCount    Int      @default(0)
  contractCount   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([salesPageId, date])
  @@index([salesPageId])
  @@index([date])
  @@map("distribution_stats")
}

// تتبع الزيارات
model Visit {
  id              Int      @id @default(autoincrement())
  ipAddress       String
  country         String?
  city            String?
  userAgent       String?
  referer         String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  targetPage      String   // الصفحة التي تم التوجيه إليها
  isGoogle        Boolean  @default(false)
  isArchived      Boolean  @default(false)  // للأرشفة
  archivedAt      DateTime?                 // تاريخ الأرشفة
  timestamp       DateTime @default(now())
  
  // معلومات الحملات الإعلانية
  gclid           String?  // Google Click ID
  fbclid          String?  // Facebook Click ID
  msclkid         String?  // Microsoft/Bing Click ID
  ttclid          String?  // TikTok Click ID
  
  // معلومات الجهاز والمتصفح
  device          String?  // mobile, desktop, tablet
  browser         String?  // Chrome, Safari, Firefox, etc.
  os              String?  // Windows, macOS, iOS, Android, etc.
  browserVersion  String?  // إصدار المتصفح
  osVersion       String?  // إصدار نظام التشغيل
  
  // معلومات إضافية
  screenWidth     Int?     // عرض الشاشة
  screenHeight    Int?     // ارتفاع الشاشة
  language        String?  // لغة المتصفح
  timezone        String?  // المنطقة الزمنية
  
  @@index([timestamp])
  @@index([targetPage])
  @@index([country])
  @@index([utmSource])
  @@index([isArchived])
  @@index([gclid])
  @@index([fbclid])
  @@index([device])
  @@map("visits")
}
